{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2332307,"sourceType":"datasetVersion","datasetId":891819}],"dockerImageVersionId":30683,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\n\nroot = \"/kaggle/input/tuberculosis-tb-chest-xray-dataset\"\nnormal_path = os.path.join(root, \"TB_Chest_Radiography_Database/Normal\")\ntb_path = os.path.join(root, \"TB_Chest_Radiography_Database/Tuberculosis\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-11T19:21:30.915083Z","iopub.execute_input":"2024-04-11T19:21:30.915812Z","iopub.status.idle":"2024-04-11T19:21:31.784632Z","shell.execute_reply.started":"2024-04-11T19:21:30.915784Z","shell.execute_reply":"2024-04-11T19:21:31.783668Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"normal_image_paths = [os.path.join(normal_path, filename) for filename in os.listdir(normal_path)]\ntb_image_paths = [os.path.join(tb_path, filename) for filename in os.listdir(tb_path)]\n\nnormal_image_labels = [(path, 0) for path in normal_image_paths]\ntb_image_labels = [(path, 1) for path in tb_image_paths]\n\nall_image_labels = normal_image_labels + tb_image_labels","metadata":{"execution":{"iopub.status.busy":"2024-04-11T19:21:31.786328Z","iopub.execute_input":"2024-04-11T19:21:31.786786Z","iopub.status.idle":"2024-04-11T19:21:32.616965Z","shell.execute_reply.started":"2024-04-11T19:21:31.786760Z","shell.execute_reply":"2024-04-11T19:21:32.616178Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import random\nimport pandas as pd\n\nrandom.seed(42)\nrandom.shuffle(all_image_labels)\ndf = pd.DataFrame(all_image_labels, columns=['im_path', 'label'])","metadata":{"execution":{"iopub.status.busy":"2024-04-11T19:21:32.618019Z","iopub.execute_input":"2024-04-11T19:21:32.618309Z","iopub.status.idle":"2024-04-11T19:21:32.631260Z","shell.execute_reply.started":"2024-04-11T19:21:32.618285Z","shell.execute_reply":"2024-04-11T19:21:32.630377Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df.head()\n#df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T19:21:32.633648Z","iopub.execute_input":"2024-04-11T19:21:32.633960Z","iopub.status.idle":"2024-04-11T19:21:32.652203Z","shell.execute_reply.started":"2024-04-11T19:21:32.633925Z","shell.execute_reply":"2024-04-11T19:21:32.651293Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                                             im_path  label\n0  /kaggle/input/tuberculosis-tb-chest-xray-datas...      0\n1  /kaggle/input/tuberculosis-tb-chest-xray-datas...      0\n2  /kaggle/input/tuberculosis-tb-chest-xray-datas...      0\n3  /kaggle/input/tuberculosis-tb-chest-xray-datas...      0\n4  /kaggle/input/tuberculosis-tb-chest-xray-datas...      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>im_path</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/kaggle/input/tuberculosis-tb-chest-xray-datas...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/kaggle/input/tuberculosis-tb-chest-xray-datas...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/kaggle/input/tuberculosis-tb-chest-xray-datas...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/kaggle/input/tuberculosis-tb-chest-xray-datas...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/kaggle/input/tuberculosis-tb-chest-xray-datas...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.countplot(data=df, x='label')\nplt.title('Distribution of Labels')\nplt.xlabel('Labels')\nplt.ylabel('Count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T19:21:32.653231Z","iopub.execute_input":"2024-04-11T19:21:32.653475Z","iopub.status.idle":"2024-04-11T19:21:34.057408Z","shell.execute_reply.started":"2024-04-11T19:21:32.653453Z","shell.execute_reply":"2024-04-11T19:21:34.056506Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# import numpy as np\n# import tensorflow as tf\n# from tensorflow.keras import layers, models\n\n# def build_generator(latent_dim):\n#     model = models.Sequential()\n#     model.add(layers.Dense(256, input_dim=latent_dim, activation='relu'))\n#     model.add(layers.Dense(512, activation='relu'))\n#     model.add(layers.Dense(1024, activation='relu'))\n#     model.add(layers.Dense(512, activation='relu'))\n#     model.add(layers.Dense(256, activation='relu'))\n#     model.add(layers.Dense(3*512*512, activation='sigmoid'))\n#     model.add(layers.Reshape((512, 512, 3)))\n#     return model\n\n# def build_discriminator(input_shape):\n#     model = models.Sequential()\n#     model.add(layers.Flatten(input_shape=input_shape))\n#     model.add(layers.Dense(512, activation='relu'))\n#     model.add(layers.Dense(256, activation='relu'))\n#     model.add(layers.Dense(1, activation='sigmoid'))\n#     return model\n\n# def build_gan(generator, discriminator):\n#     discriminator.trainable = False\n#     model = models.Sequential()\n#     model.add(generator)\n#     model.add(discriminator)\n#     return model\n\n# discriminator = build_discriminator((512, 512, 3))\n# discriminator.compile(loss='binary_crossentropy', optimizer='adam')\n\n# latent_dim = 100  # Latent dimension for generator input\n# generator = build_generator(latent_dim)\n# gan = build_gan(generator, discriminator)\n# gan.compile(loss='binary_crossentropy', optimizer='adam')\n\n# def train_gan(generator, discriminator, gan, minority_images, epochs, batch_size):\n#     for epoch in range(epochs):\n#         noise = np.random.normal(0, 1, (batch_size, latent_dim))\n#         synthetic_images = generator.predict(noise)\n#         x_combined = np.concatenate((minority_images, synthetic_images))\n#         y_combined = np.concatenate((np.ones((len(minority_images), 1)), np.zeros((batch_size, 1))))\n#         discriminator_loss = discriminator.train_on_batch(x_combined, y_combined)\n\n#         noise = np.random.normal(0, 1, (batch_size, latent_dim))\n#         y_generated = np.ones((batch_size, 1))\n#         gan_loss = gan.train_on_batch(noise, y_generated)\n\n#         print(f\"Epoch {epoch + 1}/{epochs} -- D Loss: {discriminator_loss} -- G Loss: {gan_loss}\")\n\n# class_counts = df['label'].value_counts()\n# minority_class = class_counts.idxmin()\n# minority_df = df[df['label'] == minority_class]\n# minority_class_images = ...  # Extract images from minority_df\n\n# train_gan(generator, discriminator, gan, minority_class_images, epochs, batch_size)\n# num_minority_samples = class_counts.min()\n# synthetic_minority_images = generator.predict(np.random.normal(0, 1, (num_minority_samples, latent_dim)))\n# minority_class_labels = minority_df['label'].values\n# synthetic_minority_df = pd.DataFrame({'im_path': ['path_to_synthetic_image']*num_minority_samples, 'label': minority_class_labels})\n# equalized_df = pd.concat([minority_df, synthetic_minority_df], ignore_index=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T19:21:34.058854Z","iopub.execute_input":"2024-04-11T19:21:34.059771Z","iopub.status.idle":"2024-04-11T19:21:34.066230Z","shell.execute_reply.started":"2024-04-11T19:21:34.059734Z","shell.execute_reply":"2024-04-11T19:21:34.065133Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"from sklearn.utils import resample\n\n\nnormal_images = df[df['label'] == 0]\ntb_images = df[df['label'] == 1]\n\nnormal_count = len(normal_images)\ntb_count = len(tb_images)\nif normal_count < tb_count:\n    max_label = tb_images\n    min_label = normal_images\nelse:\n    max_label = normal_images\n    min_label = tb_images\n    \ntb_oversampled = resample(min_label, replace=True, n_samples=len(max_label), random_state=42)\n\nbalanced_df = pd.concat([normal_images, tb_oversampled])\n\nbalanced_df = balanced_df.sample(frac=1, random_state=42).reset_index(drop=True)\ndf = balanced_df","metadata":{"execution":{"iopub.status.busy":"2024-04-11T19:21:34.067568Z","iopub.execute_input":"2024-04-11T19:21:34.068010Z","iopub.status.idle":"2024-04-11T19:21:34.182669Z","shell.execute_reply.started":"2024-04-11T19:21:34.067979Z","shell.execute_reply":"2024-04-11T19:21:34.181751Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import math\nimport cv2\nfrom tqdm import tqdm\n\noutput_folder = '/kaggle/working/norm_image'\n\nbatch_size=50\nnum_batches=math.ceil(df.shape[0]/batch_size)\nif not os.path.exists(output_folder):\n    os.makedirs(output_folder)\n\n\nfor i in tqdm(range(num_batches), desc=\"Processing batches\"):\n    batch_paths = df['im_path'].iloc[i * batch_size: (i + 1) * batch_size]\n    \n    for img_path in batch_paths:\n        image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n        normalized_image = cv2.equalizeHist(image) \n\n        filename = os.path.basename(img_path)\n        new_img_path = os.path.join(output_folder, filename)\n        cv2.imwrite(new_img_path, normalized_image)\n\n        df.loc[df['im_path'] == img_path, 'im_path'] = new_img_path\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T19:21:34.183953Z","iopub.execute_input":"2024-04-11T19:21:34.184232Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"Processing batches:  80%|████████  | 112/140 [01:46<00:24,  1.16it/s]","output_type":"stream"}]},{"cell_type":"code","source":"index_to_visualize = 16\n\nnormalized_image_path = df['im_path'].iloc[index_to_visualize]\nfilename = os.path.basename(normalized_image_path)\n\n\nif 'Normal' in filename:\n    original_image_path = os.path.join(normal_path, filename)\n    image_class = 'Normal'\n\nelif 'Tuberculosis' in filename:\n    original_image_path = os.path.join(tb_path, filename)\n    image_class = 'TB'\n\noriginal_image = cv2.imread(original_image_path, cv2.IMREAD_GRAYSCALE)\nnormalized_image = cv2.imread(normalized_image_path, cv2.IMREAD_GRAYSCALE)\n\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\naxes[0].imshow(original_image, cmap='gray')\naxes[0].set_title('Original Image(' + image_class + ')')\naxes[0].axis('off')\n\naxes[1].imshow(normalized_image, cmap='gray')\naxes[1].set_title('Normalized Image(' + image_class + ')')\naxes[1].axis('off')\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nnoisy_image = cv2.imread(normalized_image_path, cv2.IMREAD_GRAYSCALE)\nmin_pool = cv2.erode(noisy_image, np.ones((7, 7), np.uint8))\ndenoised_image = cv2.fastNlMeansDenoising(min_pool, None, h=20, templateWindowSize=9, searchWindowSize=11)\nprenoise_adaptive_thresh = cv2.adaptiveThreshold(min_pool, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)\n\nadaptive_thresh = cv2.adaptiveThreshold(denoised_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)\n\n#denoised_image2 = cv2.fastNlMeansDenoising(adaptive_thresh, None, h=10, templateWindowSize=10, searchWindowSize=21)\nmin_pooled1 = cv2.erode(adaptive_thresh, np.ones((3, 3), np.uint8))\n\n\nplt.figure(figsize=(18, 6))\n\nplt.subplot(1, 3, 1)\nplt.imshow(prenoise_adaptive_thresh, cmap='gray')\nplt.title('predenoising Adaptive Gaussian Thresholding Image')\nplt.axis('off')\n\nplt.subplot(1, 3, 2)\nplt.imshow(adaptive_thresh, cmap='gray')\nplt.title('Adaptive Gaussian Thresholding Result')\nplt.axis('off')\n\nplt.subplot(1, 3, 3)\nplt.imshow(min_pooled1, cmap='gray')\nplt.title('Min pooled')\nplt.axis('off')\n\nplt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image = cv2.imread(normalized_image_path, cv2.IMREAD_GRAYSCALE)\n\nmin_pooled1 = cv2.erode(image, np.ones((7, 7), np.uint8))\nmax_pooled1 = cv2.dilate(min_pooled1, np.ones((7, 7), np.uint8))\n#min_pooled2 = cv2.erode(max_pooled1, np.ones((7, 7), np.uint8))\n#max_pooled2 = cv2.dilate(min_pooled2, np.ones((7, 7), np.uint8))\n#min_pooled3 = cv2.erode(max_pooled2, np.ones((7, 7), np.uint8))\n#max_pooled3 = cv2.dilate(min_pooled3, np.ones((7, 7), np.uint8))\n\n_, otsu_thresholded = cv2.threshold(max_pooled1, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n\nplt.figure(figsize=(18, 6))\n\nplt.subplot(1, 3, 1)\nplt.imshow(image, cmap='gray')\nplt.title('Original Image')\nplt.axis('off')\n\nplt.subplot(1, 3, 2)\nplt.imshow(max_pooled1, cmap='gray')\nplt.title('Max-Pooled Image')\nplt.axis('off')\n\nplt.subplot(1, 3, 3)\nplt.imshow(otsu_thresholded, cmap='gray')\nplt.title('Otsu Thresholded Image')\nplt.axis('off')\n\nplt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image = cv2.imread(normalized_image_path, cv2.IMREAD_GRAYSCALE)\n\nblurred_image = cv2.GaussianBlur(image, (11, 11), 0)\n\n_, segmented_image = cv2.threshold(blurred_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n\nplt.figure(figsize=(18, 6))\n\nplt.subplot(1, 3, 1)\nplt.imshow(image, cmap='gray')\nplt.title('Original Image')\nplt.axis('off')\n\nplt.subplot(1, 3, 2)\nplt.imshow(blurred_image, cmap='gray')\nplt.title('Blurred Image (Gaussian Blur)')\nplt.axis('off')\n\nplt.subplot(1, 3, 3)\nplt.imshow(segmented_image, cmap='gray')\nplt.title('Segmented Image (Gaussian Thresholding)')\nplt.axis('off')\n\nplt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output_folder = '/kaggle/working/hstacked'\n\ndef create_combined_image(image, normalized_image, gaussian_otsu, min_pooled_otsu):\n    combined_image = np.hstack((image, normalized_image, gaussian_otsu, min_pooled_otsu))\n    return combined_image\n\nbatch_size = 50\nnum_batches = math.ceil(df.shape[0] / batch_size)\n\nif not os.path.exists(output_folder):\n    os.makedirs(output_folder)\n\ne_kernel = np.ones((7, 7), np.uint8)\nd_kernel = np.ones((7, 7))\nfor i in tqdm(range(num_batches), desc=\"Processing batches\"):\n    batch_paths = df['im_path'].iloc[i * batch_size: (i + 1) * batch_size]\n    \n    for img_path in batch_paths:\n        normalized_image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n        min_pool = cv2.erode(normalized_image, e_kernel)\n        denoised_image = cv2.fastNlMeansDenoising(min_pool, None, h=20, templateWindowSize=10, searchWindowSize=11)\n        adaptive_thresh = cv2.adaptiveThreshold(denoised_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)\n        min_pooled1 = cv2.erode(adaptive_thresh, np.ones((3, 3), np.uint8))\n\n        blurred_image = cv2.GaussianBlur(normalized_image, (11, 11), 0)\n        _, gaussian_otsu = cv2.threshold(blurred_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n        \n        max_pooled1 = cv2.dilate(min_pool, d_kernel)\n        _, min_pooled_otsu = cv2.threshold(max_pooled1, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n        \n        combined_image = create_combined_image(normalized_image, min_pooled1, gaussian_otsu, min_pooled_otsu)\n        \n        filename = os.path.basename(img_path)\n        combined_img_path = os.path.join(output_folder, filename)\n        cv2.imwrite(combined_img_path, combined_image)\n\n        df.loc[df['im_path'] == img_path, 'im_path'] = combined_img_path\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Example of checking the shape of an image\nexample_img_path = df['im_path'].iloc[0]  # Assuming the first image path\nexample_img = cv2.imread(example_img_path)\nprint(\"Image shape:\", example_img.shape)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, models\nfrom sklearn.model_selection import train_test_split\n\n# Define constants\nbatch_size = 10\nnum_classes = 2\nepochs = 10\n\ndata_augmentation = keras.Sequential([\n    layers.RandomFlip(\"horizontal\", input_shape=(512, 2048, 3)),\n    layers.RandomRotation(0.1),\n    layers.RandomZoom(0.1),\n      \n  ]\n)\n\nmodel = models.Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(512, 2048, 3)),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(128, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='tanh'),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='sigmoid'),\n    layers.Dense(num_classes, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Split data into train and validation sets\ntrain_paths, val_paths, train_labels, val_labels = train_test_split(df['im_path'], df['label'], test_size=0.2, random_state=42)\n\n# Define data generator\ndef data_generator(image_paths, labels, batch_size):\n    while True:\n        for start in range(0, len(image_paths), batch_size):\n            images = []\n            for img_path in image_paths[start:start + batch_size]:\n                img = cv2.imread(img_path)\n                img = cv2.resize(img, image_size)\n                images.append(img)\n            images = np.array(images) / 255.0  # Normalize pixel values\n            labels_batch = np.array(labels[start:start + batch_size])\n            yield images, labels_batch\n\n# Create data generators\ntrain_generator = data_generator(train_paths, train_labels, batch_size)\nval_generator = data_generator(val_paths, val_labels, batch_size)\n\n# Train the model\nhistory = model.fit(train_generator,\n                    steps_per_epoch=len(train_paths) // batch_size,\n                    epochs=epochs,\n                    validation_data=val_generator,\n                    validation_steps=len(val_paths) // batch_size)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(val_generator, steps=len(val_paths) // batch_size)\nprint(\"Test accuracy:\", test_acc)\n\n# Save the model\nmodel.save('hstacked_classifier.h5')\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}